Dynamic programming:

    Optimizes a problem using memoization and Tabulation
    Dynamic programming also divide and solve the problems

  eg: fibonacci series  
 Memoization:                    
  fun fib(n){                         
    if(n<=1){                 
      return n                    
    }
   return fib(n-2)+fib(n-1)       

Time complexity using recursion: O(2^n)

         f(0)  f(1)  f(2)  f(3) f(4) f(5)  
array:[  -1,   -1,   -1,  -1,   -1,   -1]


Time complexity using memoization: O(n)

       f(0)  f(1)  f(2)  f(3)  f(4)  f(5) 
array:[ 0,    1,     1,    2,   3,    5]

 Tabulation:
  int fib(int n){
    if(n<=1){
     return n
    }
  f[0]=0;f[1]=1
  for(int i=2;i<=n;i++){
     f[i]=f[i-2]+f[i-1]
   }
   return f[n]